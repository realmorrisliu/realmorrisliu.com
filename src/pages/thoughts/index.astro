---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Link from "@components/Link.astro";
import Tag from "@components/Tag.astro";
import FooterSignature from "@components/FooterSignature.astro";
import RssIcon from "@components/RssIcon.astro";
import "@styles/global.css";

const posts = (await getCollection("blog"))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const formatDate = (date: Date) => {
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

// Add reading time and smart tag sorting
const postsWithMeta = posts.map(post => {
  const readingTime = post.data.readingTime || 5;

  // Smart tag sorting: prioritize core technical tags
  const coreTags = [
    "rust",
    "ai",
    "ml",
    "devops",
    "security",
    "infrastructure",
    "architecture",
    "kubernetes",
    "api-design",
    "system-design",
  ];
  const sortedTags =
    post.data.tags?.sort((a, b) => {
      const aScore = coreTags.includes(a.toLowerCase()) ? 1 : 0;
      const bScore = coreTags.includes(b.toLowerCase()) ? 1 : 0;
      return bScore - aScore;
    }) || [];

  return {
    ...post,
    readingTime,
    sortedTags,
  };
});

// Enhanced structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  name: "Thoughts - Morris Liu",
  description:
    "Technical insights on Rust systems programming, AI infrastructure, and startup engineering from Morris Liu.",
  url: "https://realmorrisliu.com/thoughts",
  keywords: [
    "Rust programming",
    "AI infrastructure",
    "DevOps",
    "Systems programming",
    "Technical blog",
  ],
  mainEntity: {
    "@type": "Blog",
    name: "Morris Liu's Technical Blog",
    description: "Deep technical insights and engineering experiences",
    blogPost: postsWithMeta.map(post => ({
      "@type": "BlogPosting",
      headline: post.data.title,
      description: post.data.description,
      datePublished: post.data.pubDate.toISOString(),
      dateModified: post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
      url: `https://realmorrisliu.com/thoughts/${post.id.replace(/\.(md|mdx)$/, "")}`,
      author: {
        "@type": "Person",
        name: post.data.author || "Morris Liu",
      },
      keywords: post.data.tags?.join(", "),
    })),
  },
};
---

<Layout
  title="Thoughts - Morris Liu"
  description="Technical insights on Rust systems programming, AI infrastructure, and startup engineering from Morris Liu. Deep dives into building tools like Sealbox and Kira."
>
  <script type="application/ld+json" is:inline set:html={JSON.stringify(structuredData)} />

  <div class="mx-auto max-w-2xl px-6 py-16">
    <header class="mb-16">
      <h1 class="mb-4 font-serif text-4xl leading-tight">Thoughts</h1>

      <p class="text-text-secondary text-lg leading-relaxed">
        I write about Rust, AI infrastructure, DevOps, and other engineering topics. Stories behind
        building tools like Sealbox and Kira.
      </p>
    </header>

    <div class="space-y-16">
      {
        postsWithMeta.map(post => (
          <article class="border-b border-gray-300 pb-12 last:border-0">
            <div class="mb-4">
              <h2 class="mb-2 font-serif text-2xl leading-tight">
                <Link
                  href={`/thoughts/${post.id.replace(/\.(md|mdx)$/, "")}`}
                  class={`${/[\u4e00-\u9fff]/.test(post.data.title) ? "underline-offset-4" : ""}`}
                >
                  {post.data.title}
                </Link>
              </h2>

              <div class="mt-3 flex items-center gap-4 text-sm">
                <time class="text-text-secondary font-medium">{formatDate(post.data.pubDate)}</time>
                <span class="text-text-tertiary">{post.readingTime} min read</span>
              </div>

              <div class="mt-4 space-y-3">
                {post.sortedTags && post.sortedTags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {post.sortedTags.map((tag: string) => (
                      <Tag
                        tag={tag}
                        size="sm"
                        interactive={true}
                        href={`/thoughts/tags/${tag.toLowerCase()}`}
                      />
                    ))}
                  </div>
                )}
              </div>
            </div>

            <p class="text-base leading-relaxed text-gray-600">{post.data.description}</p>
          </article>
        ))
      }
    </div>

    {
      posts.length === 0 && (
        <div class="py-16 text-center">
          <p class="text-lg text-gray-600">
            No thoughts yet. Create your first post in <code>src/content/blog/</code>
          </p>
        </div>
      )
    }

    <FooterSignature>
      <div class="mt-2 flex items-center justify-between">
        <nav>
          <Link href="/" class="text-sm">‚Üê Back to main page</Link>
        </nav>
        <RssIcon showText={true} />
      </div>
    </FooterSignature>
  </div>
</Layout>
